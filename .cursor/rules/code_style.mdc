---
alwaysApply: true
---

This rule contains guidelines for the code style that should be strictly followed by cursor agent:

* The code of this repository is based in Python 3.11+
* Do not modify files that are not part of the implementation plan
* Do not break current implementations just for the sake of improving something, if you are not asked to do that, please don't do.
* Usage of classes is preferred, though not always is necessary to have so much boilerplate code.
* Attach to SOLID principles but don't be so strict, try to keep the code maintainable but avoid the point in which you have to modify a lot of files for adding simple things.
* Do not hallucinate, if anything is not clear, ask me instead of implemented wrong things that I'm gonna revert.
* Always prefer DRY and KISS
* The directory is currently split into file types, so the root directory have:
```bash
.
├── agents -> Everything related to AI agents MUST go here
│   ├── candidate_matcher -> An AI agent
│   │   ├── agent.py
│   │   └── prompts.py
│   ├── common -> Common libs for being used across AI agents
│   │   ├── abstract_agent.py
│   │   ├── mcps
│   │   └── tools
│   │       ├── __init__.py
│   │       ├── enrich_job_postings.py
│   │       ├── get_candidates.py
│   │       ├── get_job_postings.py
│   │       ├── google_search.py
│   │       ├── json_tools.py
│   │       ├── save_job_postings.py
│   │       └── save_matches.py
│   └── job_seeker -> Another AI agent
│       ├── agent.py
│       └── prompts.py
├── alembic.ini
├── bot -> Telegram bot concerns
│   ├── constants.py
│   └── telegram_bot.py
├── common -> libraries that contains common logic or data access that can be shared across modules
│   ├── config
│   │   └── config.py
│   ├── database
│   │   ├── database.py
│   │   ├── migrations
│   │   │   ├── env.py
│   │   │   ├── README
│   │   │   ├── script.py.mako
│   │   │   └── versions -> Here go the autogenerated migration files
│   │   ├── models
│   │   │   ├── __init__.py
│   │   │   ├── candidate.py
│   │   │   ├── job_posting.py
│   │   │   └── match.py
│   │   ├── repositories
│   │   │   ├── candidates.py
│   │   │   ├── job_posting.py
│   │   │   └── matches.py
│   │   └── seeders
│   │       ├── __init__.py
│   │       ├── __main__.py
│   │       └── candidate_seeder.py
│   └── types
│       └── upsert_candidate_input.py
├── crons -> Cron jobs
│   ├── cron_manager.py
│   ├── job_enrichment_cron.py
│   ├── job_seeker_cron.py
│   ├── match_notification_cron.py
│   └── notification_cron.py
├── debug_workflow.py
├── docker-compose.yml
├── Dockerfile
├── docs
│   ├── architecture.png
│   ├── bot_profile_pic.png
│   ├── bot_telegram_logo.png
│   ├── cron_configuration.md
│   ├── example_message.png
│   ├── job_enrichment_improvements.md
│   ├── jobs_bot_architecture.excalidraw
│   ├── migrations.md
│   ├── notification_testing.md
│   ├── seeder.md
│   ├── telegram_bot_link.png
│   ├── testing_job_enrichment.md
│   └── upsert_implementation.md
├── install_playwright.py
├── main.py
├── Makefile
├── README.md
├── requirements.txt
├── scripts
│   └── users.sql
├── services
│   ├── candidates.py
│   └── notification_service.py
├── test_cron_config.py
├── test_job_enrichment_improved.log
├── test_job_enrichment_improved.py
├── test_job_enrichment.log
├── test_job_enrichment.py
├── test_matches.py
├── test_notification_cron.py
├── test_notification_fix.py
├── test_notification_integration.py
└── workflows
    ├── __init__.py
    └── job_matching_workflow.py
```
* The directory structure MUST be followed
* Creating `test_*.py` files MUST be avoided, to test, for example agent, an `if __name__ == '__main__':` block must be created in the file to be tested, and a new config under the launch.json must be added to be executed isolated in cursor or vscode